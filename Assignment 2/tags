!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ASSERT_EQUALS_POOL	test_assign2_1.c	16;"	d	file:
BM_FrameElt_Free	buffer_structures.c	/^RC BM_FrameElt_Free( BM_Frame *frame) {$/;"	f
BM_FrameInfo_Del	buffer_structures.c	/^RC BM_FrameInfo_Del(BM_FrameInfo *fi) {$/;"	f
BM_FrameInfo_Init	buffer_structures.c	/^RC BM_FrameInfo_Init(BM_FrameInfo *fi,  BM_PageHandle *pHandle) {$/;"	f
BM_Frame_Archive_Page	buffer_structures.c	/^RC BM_Frame_Archive_Page(BM_Frame *frame, BM_PageHandle *pHandle ) {$/;"	f
BM_Frame_Manager_Init	buffer_structures.c	/^RC BM_Frame_Manager_Init(   BM_Frame_Manager *bfm,$/;"	f
BM_Frame_Manager_Wipe	buffer_structures.c	/^RC BM_Frame_Manager_Wipe(BM_Frame_Manager *bfm, ReplacementStrategy strategy) {$/;"	f
BM_Move_To_Front	buffer_structures.c	/^RC BM_Move_To_Front(BM_Frame_Manager *bfm,$/;"	f
BM_PageFrameElt_Add	buffer_structures.c	/^RC BM_PageFrameElt_Add(BM_Frame_Manager *bfm, BM_Frame *frame) {$/;"	f
BM_PageFrameElt_Del	buffer_structures.c	/^RC BM_PageFrameElt_Del(BM_Frame_Manager *bfm, PageNumber pageNum) {$/;"	f
BM_PageFrameElt_Init	buffer_structures.c	/^RC BM_PageFrameElt_Init(BM_PageFrameElt * bpfe) {$/;"	f
BM_pageHash	buffer_mgr.c	/^int BM_pageHash(PageNumber pageNum) {$/;"	f
RC_message	dberror.c	/^char *RC_message;$/;"	v
appendEmptyBlock	storage_mgr.c	/^extern RC appendEmptyBlock (SM_FileHandle *fHandle) {$/;"	f
assertBM_BufferPool	buffer_mgr.c	/^RC assertBM_BufferPool(BM_BufferPool *bm) {$/;"	f
assertBM_PageHandle	buffer_mgr.c	/^RC assertBM_PageHandle(BM_PageHandle *pHandle) {$/;"	f
assertHandle	storage_mgr.c	/^extern assertHandle(SM_FileHandle *fHandle) {$/;"	f
assertInit	storage_mgr.c	/^extern RC assertInit(SM_FileHandle *fHandle, SM_PageHandle memPage) {$/;"	f
assertMempage	storage_mgr.c	/^extern assertMempage(SM_PageHandle memPage) {$/;"	f
assertPageBounds	storage_mgr.c	/^extern RC assertPageBounds(int PageNum, int lowerBound, $/;"	f
bfm1	buffer_mgr.c	/^BM_Frame_Manager *bfm1;$/;"	v
checkDummyPages	test_assign2_1.c	/^checkDummyPages(BM_BufferPool *bm, int num)$/;"	f
closePageFile	storage_mgr.c	/^extern RC closePageFile (SM_FileHandle *fHandle)    {$/;"	f
createDummyPages	test_assign2_1.c	/^createDummyPages(BM_BufferPool *bm, int num)$/;"	f
createPageFile	storage_mgr.c	/^extern RC createPageFile(char *fileName)   {$/;"	f
deque	buffer_structures.c	/^BM_Frame *deque(BM_Frame_Manager *bfm, ReplacementStrategy strategy)   {$/;"	f
destroyPageFile	storage_mgr.c	/^extern RC destroyPageFile (char *fileName)    {$/;"	f
enqueue	buffer_structures.c	/^RC enqueue( BM_Frame_Manager *bfm,$/;"	f
ensureCapacity	storage_mgr.c	/^extern RC ensureCapacity (int numberOfPages, SM_FileHandle *fHandle) {$/;"	f
errorMessage	dberror.c	/^errorMessage (RC error)$/;"	f
evict	buffer_structures.c	/^RC evict(BM_Frame_Manager *bfm, ReplacementStrategy strategy, SM_FileHandle *fHandle) {$/;"	f
fileExists	storage_mgr.c	/^extern int fileExists(char *fileName) {$/;"	f
forceFlushPool	buffer_mgr.c	/^RC forceFlushPool(BM_BufferPool *const bm) {$/;"	f
forcePage	buffer_mgr.c	/^RC forcePage (BM_BufferPool *const bm, BM_PageHandle *const page)   {$/;"	f
getBlockPos	storage_mgr.c	/^extern int getBlockPos (SM_FileHandle *fHandle) {$/;"	f
getDirtyFlags	buffer_mgr.c	/^bool *getDirtyFlags (BM_BufferPool *const bm)   {$/;"	f
getFixCounts	buffer_mgr.c	/^int  *getFixCounts(BM_BufferPool *const bm)   {$/;"	f
getFrameContents	buffer_mgr.c	/^PageNumber *getFrameContents (BM_BufferPool *const bm) {$/;"	f
getNumReadIO	buffer_mgr.c	/^int getNumReadIO (BM_BufferPool *const bm) {$/;"	f
getNumWriteIO	buffer_mgr.c	/^int getNumWriteIO (BM_BufferPool *const bm) {$/;"	f
initBufferPool	buffer_mgr.c	/^RC initBufferPool(BM_BufferPool *const bm, const char *const pageFileName,$/;"	f
initStorageManager	storage_mgr.c	/^extern void  initStorageManager(void) {$/;"	f
isDirty	buffer_structures.c	/^bool isDirty(BM_Frame *frame) {$/;"	f
lookupFrame	buffer_mgr.c	/^BM_Frame *lookupFrame(BM_Frame_Manager *bfm, PageNumber PageNum) {$/;"	f
main	test_assign2_1.c	/^main (void)$/;"	f
markDirty	buffer_mgr.c	/^RC markDirty(BM_BufferPool *bm, BM_PageHandle *pHandle) {$/;"	f
openPageFile	storage_mgr.c	/^extern RC openPageFile (char *fileName, SM_FileHandle *fHandle) {$/;"	f
pinPage	buffer_mgr.c	/^RC pinPage (BM_BufferPool *const bm, BM_PageHandle *const page,$/;"	f
printError	dberror.c	/^printError (RC error)$/;"	f
printPageContent	buffer_mgr_stat.c	/^printPageContent (BM_PageHandle *const page)$/;"	f
printPoolContent	buffer_mgr_stat.c	/^printPoolContent (BM_BufferPool *const bm)$/;"	f
printStrat	buffer_mgr_stat.c	/^printStrat (BM_BufferPool *const bm)$/;"	f
print_Frame	buffer_structures.c	/^void print_Frame(BM_Frame *f) {$/;"	f
print_HashMap	buffer_structures.c	/^RC print_HashMap(BM_Frame_Manager *bfm) {$/;"	f
print_Hashindex	buffer_structures.c	/^RC print_Hashindex(int index, BM_Frame_Manager *bfm) {$/;"	f
print_Qmatch	buffer_structures.c	/^void print_Qmatch(BM_Frame_Manager *bfm, BM_Frame *frame) {$/;"	f
print_Queue	buffer_structures.c	/^void print_Queue(BM_Frame_Manager *bfm) {$/;"	f
readBlock	storage_mgr.c	/^extern RC readBlock (int pageNum, $/;"	f
readCurrentBlock	storage_mgr.c	/^extern RC readCurrentBlock(SM_FileHandle *fHandle,$/;"	f
readFirstBlock	storage_mgr.c	/^extern RC readFirstBlock (SM_FileHandle *fHandle, $/;"	f
readLastBlock	storage_mgr.c	/^extern RC readLastBlock (SM_FileHandle *fHandle, SM_PageHandle memPage) {$/;"	f
readNextBlock	storage_mgr.c	/^extern RC readNextBlock (SM_FileHandle *fHandle, $/;"	f
readPreviousBlock	storage_mgr.c	/^extern RC readPreviousBlock(SM_FileHandle *fHandle, $/;"	f
shutdownBufferPool	buffer_mgr.c	/^RC shutdownBufferPool(BM_BufferPool *const bm) {$/;"	f
sprintPageContent	buffer_mgr_stat.c	/^sprintPageContent (BM_PageHandle *const page)$/;"	f
sprintPoolContent	buffer_mgr_stat.c	/^sprintPoolContent (BM_BufferPool *const bm)$/;"	f
startRead	storage_mgr.c	/^extern RC startRead(int pageNum, $/;"	f
startWrite	storage_mgr.c	/^extern RC startWrite(int pageNum, $/;"	f
testCreatingAndReadingDummyPages	test_assign2_1.c	/^testCreatingAndReadingDummyPages (void)$/;"	f
testFIFO	test_assign2_1.c	/^testFIFO ()$/;"	f
testName	test_assign2_1.c	/^char *testName;$/;"	v
testReadPage	test_assign2_1.c	/^testReadPage ()$/;"	f
unpinPage	buffer_mgr.c	/^RC unpinPage(BM_BufferPool *const bm, BM_PageHandle *const pHandle) {$/;"	f
writeBlock	storage_mgr.c	/^extern RC writeBlock (int pageNum, $/;"	f
writeCurrentBlock	storage_mgr.c	/^extern RC writeCurrentBlock(SM_FileHandle *fHandle,$/;"	f
